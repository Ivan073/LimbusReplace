{
  "moveFiles": {
    "enabled": true,
    "sourceTranslation": "en",
    "translationName": "en(short)"
  },
  "replaceFilesEnabled": true,
  "statuses": {
    "enabled": true,
    "fields": {
      "required": ["id", "name"],
      "optional": ["summary", "undefined", "desc"]
    },
    "ignoredFiles": ["SkillTag.json", "AttributeText.json", "EgoGiftCategory.json"]
  },
  "skillTagPersistence": true,
  "replace":[
    {
      "fields": [ "name" ],
      "changes": [
        {
          "from": "On ",
          "to": ""
        }
      ]
    },
    {
      "fields": [ "desc", "summary", "lowMoraleDescription", "panicDescription" ],
      "changes": [
        {
          "from": "’",
          "to": "'"
        },
        {
          "regex": true,
          "from": "\\(Max",
          "to": "(max"
        },
        {
          "from": "damage",
          "to": "Damage"
        },
        {
          "from": "Coin Power",
          "to": "[PlusCoinValueUp]"
        },
        {
          "from": "Clash Power",
          "to": "[ParryingResultUp]"
        },
        {
          "regex": true,
          "from": "(Skill|Base|Final) Power",
          "to": "[ResultEnhancement]"
        },
        {
          "from": "On Hit with this Skill:",
          "to": "[OnSucceedAttack]"
        },
        {
          "from": "Atk Weight",
          "to": "AoE"
        },
        {
          "from": "on Critical Hit",
          "to": "on Crit"
        },
        {
          "regex": true,
          "from": "negative (?:status )effect",
          "to": "ailment"
        },
        {
          "regex": true,
          "from": "(type|types) of (ailment|ailments)",
          "to": "ailment \\1"
        },
        {
          "regex": true,
          "from": "If target has ([^,\n:]+)[,:]",
          "to": "Target: \\1 →"
        },
        {
          "regex": true,
          "from": "If target's (\\S+) (?:is )?below (\\S+)[,:]",
          "to": "Target: \\1 < \\2 →"
        },
        {
          "regex": true,
          "from": "If target's (\\S+) is above (\\S+)[,:]",
          "to": "Target: \\1 > \\2 →"
        },
        {
          "regex": true,
          "from": "([^,\n:]+) to targets with ([^,\n:]+)",
          "to": "Target: \\2 → \\1"
        },
        {
          "regex": true,
          "from": "Raise Stagger Threshold by (\\S+) of Damage dealt",
          "to": "Target: Raise Stagger by \\1 of Damage"
        },
        {
          "regex": true,
          "from": "([^,\n:]+) per ([^,\n:]+) on target(\\))?",
          "to": "Target: per \\2\\3 → \\1"
        },
        {
          "regex": true,
          "from": "([^,\n:]+) for every ([^,\n:]+) or for every ([^,\n:]+) on target",
          "to": "Self: per \\2 or Target: per \\3 → \\1"
        },
        {
          "regex": true,
          "from": "([^,\n:]+) for every ([^,\n:]+) on target(\\))?",
          "to": "Target: per \\2\\3 → \\1"
        },
        {
          "regex": true,
          "from": "[Ii]f target is ([^\n\\.]+),\\s*([^\n\\.]+)",
          "to": "Target: \\1 -> \\2"
        },
        {
          "regex": true,
          "from": "[Ii]f target isn't (a[^\n\\.]+),\\s*([^\n\\.]+)",
          "to": "Target: not \\1 -> \\2"
        },
        {
          "regex": true,
          "from": "([^,\n:]+) for every ([^,\n:]+) on self",
          "to": "Self: per \\2 → \\1"
        },
        {
          "regex": true,
          "from": "([^,\n:]+) for (?:<style=\"highlight\">)?every(?:</style>)? ([^,\n:]+) on self",
          "to": "Self: per \\2 → \\1"
        },
        {
          "regex": true,
          "from": "For every ([^,\n:]+) on self[,:]",
          "to": "Self: per \\1 →"
        },
        {
          "regex": true,
          "from": "([^,\n:]+) for every ([^,\n:]+) \\(max (\\d+)\\)",
          "to": "Self: per \\2 → \\1 (max \\3)"
        },
        {
          "from": "for every",
          "to": "per"
        },
        {
          "regex": true,
          "from": "At (\\d+)(%)?\\+ (HP|SP)[,:]",
          "to": "Self: \\3 >= \\1\\2 →"
        },
        {
          "regex": true,
          "from": "At (\\d+)(%)? or less (HP|SP)[,:]",
          "to": "Self: \\3 <= \\1\\2 →"
        },
        {
          "regex": true,
          "from": "At (\\d+)(%)? or more (HP|SP)[,:]",
          "to": "Self: \\3 >= \\1\\2 →"
        },
        {
          "regex": true,
          "from": "When below (\\S+)(%)? (HP|SP)[,:]",
          "to": "Self: \\3 < \\1\\2 →"
        },
        {
          "regex": true,
          "from": "([^,\\n:]+) when below (\\S+)(%)? (HP|SP)",
          "to": "Self: \\4 < \\2\\3 → \\1"
        },
        {
          "regex": true,
          "from": "If this unit has ([^,\n:]+)[,:]",
          "to": "Self: \\1 →"
        },
        {
          "regex": true,
          "from": "If this unit does not have ([^,\n:]+)[,:]",
          "to": "Self: no \\1 →"
        },
        {
          "regex": true,
          "from": "If user has ([^,\n:]+)[,:]",
          "to": "Self: \\1 →"
        },
        {
          "regex": true,
          "from": "At (\\d+)\\+ ([^,\n:]+)[,:]",
          "to": "Self: \\1+ \\2 →"
        },
        {
          "regex": true,
          "from": "(?:When )?[Aa]t less than (\\S+) ([^,\\n:]+)[,:]",
          "to": "Self: \\2 < \\1 →"
        },
        {
          "regex": true,
          "from": "less than (\\S+)",
          "to": "< \\1"
        },
        {
          "regex": true,
          "from": "Lower user's Stagger Threshold by (\\S+) of Damage dealt",
          "to": "Self: Lower Stagger by \\1 of Damage"
        },
        {
          "regex": true,
          "from": "If this Skill attack kills the target[,:]",
          "to": "[EnemyKill]"
        },
        {
          "regex": true,
          "from": "On kill[,:]",
          "to": "[EnemyKill]"
        },
        {
          "regex": true,
          "from": "deal (.)?(\\d+)(.)?(?: more)? Damage",
          "to": "Damage \\1\\2\\3"
        },
        {
          "regex": true,
          "from": "The final Coin deals (.)?(\\d+)(.)?(?: more)? Damage",
          "to": "Final Coin: Damage \\1\\2\\3"
        },
        {
          "regex": true,
          "from": "[Ii]f (?:the unit's|this unit's|user's) Speed is faster than (?:the )?(main )?(?:target's|target)([^,\n:]*)[,:]",
          "to": "Faster than \\1target\\2 →"
        },
        {
          "regex": true,
          "from": "[Ii]f (?:the unit's|this unit's|user's) Speed is faster than (?:the )?(main )?(?:target's|target) by (\\S+) or more([^,\n:]*)[,:]",
          "to": "Faster than \\1target by \\2+\\3 →"
        },
        {
          "regex": true,
          "from": "[Ii]f (?:the unit's|this unit's|user's) Speed is faster than (?:the )?(main )?(?:target's|target) by (\\S+)\\+([^,\n:]*)[,:]",
          "to": "Faster than \\1target by \\2+\\3 →"
        },
        {
          "regex": true,
          "from": "[Ii]f (?:the unit's|this unit's|user's) Speed is faster than (?:the )?(main )?(?:target's|target)",
          "to": "Faster than \\1target →"
        },
        {
          "regex": true,
          "from": "[Ii]f (?:the unit's|this unit's|user's) Speed is faster than (?:the )?(main )?(?:target's|target) by (\\S+) or more",
          "to": "Faster than \\1target by \\2+ →"
        },
        {
          "regex": true,
          "from": "[Ii]f (?:the unit's|this unit's|user's) Speed is faster than (?:the )?(main )?(?:target's|target) by (\\S+)\\+",
          "to": "Faster than \\1target by \\2+ →"
        },
        {
          "from": "If this unit is faster than the target,",
          "to": "Faster than target →"
        },
        {
          "regex": true,
          "from": "([^,\n:]+) at (\\d+)\\+ Speed",
          "to": "Speed >= \\2 → \\1"
        },
        {
          "regex": true,
          "from": "[Ii]f (main )?(?:target's|target) Speed is slower than (?:the unit's|this unit's|user's) by (\\S+)\\+[,:]",
          "to": "Faster than \\1target by \\2+ →"
        },
        {
          "regex": true,
          "from": "At (\\d+)\\+ Speed[,:]",
          "to": "Speed >= \\1"
        },
        {
          "regex": true,
          "from": "Spend ([^,\n:]+) to gain",
          "to": "Spend \\1 →"
        },
        {
          "regex": true,
          "from": "Spend ([^,\n:]+) to turn this",
          "to": "Spend \\1 → turn"
        },
        {
          "regex": true,
          "from": "(?:Consume|Spend) ([^,\\n:]+)(?: on self)? to(?: gain)?",
          "to": "Self: Spend \\1 →"
        },
        {
          "regex": true,
          "from": "(?:consume|Spend) ([^,\\n:]+) on target to(?: gain)?",
          "to": "Target: Spend \\1 →"
        },
        {
          "regex": true,
          "from": "(?:1 )?(ally|allies) (?:with )?(?:the )?(most|highest|lowest|least) (?:current )?(Max )?(HP|SP)",
          "to": "\\2 \\3\\4 \\1"
        },
        {
          "regex": true,
          "from": "(?:1 )?(ally|allies) (?:with )?(?:the )?(slowest|fastest) Speed",
          "to": "\\2 \\1"
        },
        {
          "regex": true,
          "from": "If this Skill is Discarded[,:]",
          "to": "[Discard]:"
        },
        {
          "regex": true,
          "from": "Heal (\\d+) (SP|HP)",
          "to": "+\\1 \\2"
        },
        {
          "from": "Max # of allies that can be healed:",
          "to": "Max of healed allies:"
        },
        {
          "from": "allies adjacent to this unit on the Dashboard",
          "to": "Dashboard-adjacent allies"
        },
        {
          "regex": true,
          "from": "If target is Staggered of defeated[,:]",
          "to": "[EnemyKill] or Stagger →"
        },
        {
          "regex": true,
          "from": "([^,\n:]+) chance to Reuse Coin(?: once)?",
          "to": "Reuse Coin chance: \\1"
        },
        {
          "regex": true,
          "from": "\\+(\\d+) more chance to Reuse Coin",
          "to": "Reuse Coin chance: \\1"
        },
        {
          "regex": true,
          "from": "(\\d+) or more",
          "to": "\\1+"
        },
        {
          "regex": true,
          "from": "If this Skill attack kills the target[,:]",
          "to": "[EnemyKill]"
        },
        {
          "regex": true,
          "from": "When an ally is defeated[,:]",
          "to": "Ally death →"
        },
        {
          "from": "after an ally is defeated",
          "to": "after ally death"
        },
        {
          "regex": true,
          "from": "When in a Volatile E.G.O state[,:]",
          "to": "[Volatile E.G.O]:"
        },
        {
          "regex": true,
          "from": "'Unique ([^,\n:]+)' as ([^,\n:]+)",
          "to": "Has 'Unique \\1'"
        },
        {
          "regex": true,
          "from": "sum of ([^,\n:\\)]+) and ([^,\n:\\)]+)",
          "to": "\\1 + \\2"
        },
        {
          "from": "At the start of the turn,",
          "to": "Turn start:"
        }
      ]
    }]
}

